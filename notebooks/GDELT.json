{"paragraphs":[{"text":"%pyspark\n\nfrom functools import partial\nfrom itertools import chain\nfrom urllib.request import urlopen\nfrom datetime import datetime\nfrom pyspark import SparkContext\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.types import FloatType","user":"anonymous","dateUpdated":"2018-06-29T18:25:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1530276828431_1537771897","id":"20180619-134127_713396505","dateCreated":"2018-06-29T12:53:48+0000","dateStarted":"2018-06-29T18:25:27+0000","dateFinished":"2018-06-29T18:25:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:101"},{"text":"%pyspark\n\n# Monkey patching SSL\nimport ssl\nssl.match_hostname = lambda cert, hostname: True","user":"anonymous","dateUpdated":"2018-06-29T18:25:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1530276828435_1548544866","id":"20180626-085516_286684583","dateCreated":"2018-06-29T12:53:48+0000","dateStarted":"2018-06-29T18:25:27+0000","dateFinished":"2018-06-29T18:25:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:102"},{"text":"%pyspark\n\ndef normalize_date(date, starting_date, ending_date, date_format):\n    num_days = (datetime.strptime(ending_date, date_format) - datetime.strptime(starting_date, date_format)).days\n    day = (datetime.strptime(date, date_format) - datetime.strptime(starting_date, date_format)).days\n    return day / num_days","user":"anonymous","dateUpdated":"2018-06-29T18:25:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1530276828435_1548544866","id":"20180619-134604_211071156","dateCreated":"2018-06-29T12:53:48+0000","dateStarted":"2018-06-29T18:25:27+0000","dateFinished":"2018-06-29T18:25:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:103"},{"text":"%pyspark\n\nprint('Starting GDELT Cleaning')\ngdelt = list()\ncols_to_take = ['SQLDATE', 'Actor1Code', 'Actor2Code', 'EventCode', 'Actor1Geo_CountryCode', 'Actor2Geo_CountryCode', 'ActionGeo_CountryCode']\ncolumns = urlopen('http://gdeltproject.org/data/lookups/CSV.header.dailyupdates.txt').read().decode('utf-8').split('\\t')\n\nprint('Getting GDELT')\nfor year in ['2017', '2018']:\n    gdf = spark.read.option('header', 'false').option('sep', '\\t').csv('s3://gdelt-open-data/events/' + year + '*')\n    for i in range(58):\n        gdf = gdf.withColumnRenamed(\"_c\" + str(i), columns[i])\n    gdelt.append(gdf.select(cols_to_take).dropna().drop_duplicates())\n\nprint('Unioning GDELT')\ngdelt = gdelt[0].unionByName(gdelt[1]).distinct()\n\n# print('Writing cleaned GDELT')\n# gdelt.write.csv('s3://gdelt4ibd/cleaned_gdelt_2017_2018.csv', 'overwrite', 'gzip', header='true')","user":"anonymous","dateUpdated":"2018-06-29T18:25:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"msg":[{"data":"","type":"TEXT"}]},"apps":[],"jobName":"paragraph_1530276828436_1546621122","id":"20180619-144236_374223438","dateCreated":"2018-06-29T12:53:48+0000","dateStarted":"2018-06-29T18:25:27+0000","dateFinished":"2018-06-29T18:16:49+0000","status":"RUNNING","progressUpdateIntervalMs":500,"$$hashKey":"object:104","errorMessage":""},{"text":"%pyspark\n\ndummies_var = list()\n\nprint('Lowercasing GDELT')\nfor col in gdelt.columns[1:]:\n    gdelt = gdelt.withColumn(col, F.lower(F.col(col)))\n\nprint('Getting only GDELT FRA Event')\ngdelt = gdelt.where('Actor1Code RLIKE \"^fra.*\"')\ngdelt = gdelt.where('Actor2Code RLIKE \"^fra.*\"')\n\nprint('Normalizing Date')\ndate_normalizer = partial(normalize_date, starting_date='20170101', ending_date='20190101', date_format='%Y%m%d')\npudf_normalizer = F.pandas_udf(lambda ds: ds.apply(date_normalizer), FloatType(), F.PandasUDFType.SCALAR)\n# date_normalizer = F.udf(lambda d: normalize_date(d, '20170101', '20190101', '%Y%m%d'), FloatType())\ngdelt = gdelt.withColumn('date', pudf_normalizer(gdelt.SQLDATE)).drop('SQLDATE')\n\ngdelt.count()\n\nprint('GDELT to dummies')\nfor col in cols_to_take[1:]:\n    categories = gdelt.select(col).distinct().rdd.flatMap(lambda x: x).collect()\n    dummies_var.append([F.when(F.col(col) == category, 1).otherwise(0).alias(col.lower() + '_' + category) for category in categories])\ngdelt = gdelt.select('date', *list(chain.from_iterable(dummies_var)))\n\nprint('Writing GDELT')\ngdelt.write.csv('s3://gdelt4ibd/normalized_gdelt_2017_2018.csv', 'overwrite', 'gzip', header='true')","user":"anonymous","dateUpdated":"2018-06-29T18:25:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1530276828436_1546621122","id":"20180619-140116_876270898","dateCreated":"2018-06-29T12:53:48+0000","dateStarted":"2018-06-29T18:25:27+0000","dateFinished":"2018-06-29T18:25:10+0000","status":"PENDING","progressUpdateIntervalMs":500,"$$hashKey":"object:105","errorMessage":""},{"text":"%pyspark\n\ngdelt_metadata = {\n \"train_cols\": ['date'] + [c for c in gdelt.columns if 'actor1code' or 'actor2code' in c],\n \"val_cols\": [c for c in gdelt.columns if 'event' or 'geo' in c],\n \"num_classes\": len(list(chain.from_iterable(dummies_var[3:]))),\n \"train_shape\": (gdelt.count(), len(list(chain.from_iterable(dummies_var[:3]))) + 1)\n}\nsc.parallelize([gdelt_metadata]).coalesce(1).saveAsTextFile('s3://gdelt4ibd/gdelt_metadata.json')","user":"anonymous","dateUpdated":"2018-06-29T14:03:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1530276828437_1546236373","id":"20180620-164755_917012619","dateCreated":"2018-06-29T12:53:48+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:107"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2018-06-29T18:14:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1530286326037_-527366883","id":"20180629-153206_449035984","dateCreated":"2018-06-29T15:32:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109"}],"name":"GDELT","id":"2DKG17XKJ","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}